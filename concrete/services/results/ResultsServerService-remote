#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.18.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from concrete.services.results import ResultsServerService
from concrete.services.results.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void registerSearchResult(SearchResult result, AnnotationTaskType taskType)')
    print('   getSearchResults(AnnotationTaskType taskType, i32 limit)')
    print('   getSearchResultsByUser(AnnotationTaskType taskType, string userId, i32 limit)')
    print('  SearchResult getLatestSearchResult(string userId)')
    print('  SearchResult getSearchResult(UUID searchResultId)')
    print('  UUID startSession(UUID searchResultId, AnnotationTaskType taskType)')
    print('  void stopSession(UUID sessionId)')
    print('   getNextChunk(UUID sessionId)')
    print('  void submitAnnotation(UUID sessionId, AnnotationUnitIdentifier unitId, Communication communication)')
    print('  ServiceInfo about()')
    print('  bool alive()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ResultsServerService.Client(protocol)
transport.open()

if cmd == 'registerSearchResult':
    if len(args) != 2:
        print('registerSearchResult requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerSearchResult(eval(args[0]), eval(args[1]),))

elif cmd == 'getSearchResults':
    if len(args) != 2:
        print('getSearchResults requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSearchResults(eval(args[0]), eval(args[1]),))

elif cmd == 'getSearchResultsByUser':
    if len(args) != 3:
        print('getSearchResultsByUser requires 3 args')
        sys.exit(1)
    pp.pprint(client.getSearchResultsByUser(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'getLatestSearchResult':
    if len(args) != 1:
        print('getLatestSearchResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLatestSearchResult(args[0],))

elif cmd == 'getSearchResult':
    if len(args) != 1:
        print('getSearchResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSearchResult(eval(args[0]),))

elif cmd == 'startSession':
    if len(args) != 2:
        print('startSession requires 2 args')
        sys.exit(1)
    pp.pprint(client.startSession(eval(args[0]), eval(args[1]),))

elif cmd == 'stopSession':
    if len(args) != 1:
        print('stopSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopSession(eval(args[0]),))

elif cmd == 'getNextChunk':
    if len(args) != 1:
        print('getNextChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNextChunk(eval(args[0]),))

elif cmd == 'submitAnnotation':
    if len(args) != 3:
        print('submitAnnotation requires 3 args')
        sys.exit(1)
    pp.pprint(client.submitAnnotation(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'about':
    if len(args) != 0:
        print('about requires 0 args')
        sys.exit(1)
    pp.pprint(client.about())

elif cmd == 'alive':
    if len(args) != 0:
        print('alive requires 0 args')
        sys.exit(1)
    pp.pprint(client.alive())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
